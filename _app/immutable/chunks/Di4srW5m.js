import{b as H,d as yn,f as w,a as h}from"./0BP-6TFY.js";import"./CZzLNGhg.js";import{t as fn,h as B,a as V,P as wn,aH as hn,d as X,V as vn,Y as bn,W as _n,B as Cn,T as x,s as t,o as v,v as n,w as s,aI as P}from"./CX9Gwrfj.js";import{r as Sn}from"./DK5zR4CQ.js";function a(u,o,p=!1,r=!1,e=!1){var i=u,c="";fn(()=>{var d=wn;if(c===(c=o()??"")){B&&V();return}if(d.nodes_start!==null&&(hn(d.nodes_start,d.nodes_end),d.nodes_start=d.nodes_end=null),c!==""){if(B){X.data;for(var l=V(),y=l;l!==null&&(l.nodeType!==8||l.data!=="");)y=l,l=vn(l);if(l===null)throw bn(),_n;H(X,y),i=Cn(l);return}var k=c+"";p?k=`<svg>${k}</svg>`:r&&(k=`<math>${k}</math>`);var m=yn(k);if((p||r)&&(m=x(m)),H(x(m),m.lastChild),p||r)for(;x(m);)i.before(x(m));else i.before(m)}})}const J={title:"Finite-State Machine",date:"2025-06-22",category:"software",subCategory:"Backend",tags:["FSM","backend","markdown"],slug:"FSM"},{title:Cs,date:Ss,category:Is,subCategory:Ds,tags:Rs,slug:Es}=J;var In=w('<h6>導入類比電路的概念來實作，用金流串接當作範例</h6> <hr/> <h3>核心概念</h3> <p>狀態是封閉集合：Pending / Paid / Failed / RefundPending / Refunded。事件（Trigger）是唯一入口：只有明確的事件才能讓狀態改變。</p> <pre class="language-csharp"><!></pre> <table><thead><tr><th>CurrentState</th><th>Trigger</th><th>NextState</th></tr></thead><tbody><tr><td>Pending</td><td>PaySucceeded</td><td>Paid</td></tr><tr><td>Pending</td><td>PayFailed</td><td>Failed</td></tr><tr><td>Paid</td><td>StartRefund</td><td>RefundPending</td></tr><tr><td>RefundPending</td><td>RefundSucceeded</td><td>Refunded</td></tr><tr><td>RefundPending</td><td>RefundFailed</td><td>Paid</td></tr><tr><td>Failed/Refunded</td><td><em>(無任何事件)</em></td><td><em>(終點)</em></td></tr></tbody></table> <h3>簡易流程</h3> <pre class="language-csharp"><!></pre> <p>限制行為的方式</p> <pre class="language-csharp"><!></pre> <h3>測試與擴充</h3> <p>單元測試每條轉移：「Pending → PaySucceeded → Paid」。</p> <p>新增流程：只要在 enum + 轉移表多加一條，和對應 trigger 的處理；主程式 switch(fsm.CurrentState) 自動接手 DB 差異。</p>',1);function Dn(u){var o=In(),p=t(v(o),8),r=n(p);a(r,()=>`<code class="language-csharp"><span class="token comment">// 狀態（State）</span>
<span class="token function">Pending</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> → <span class="token function">Paid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> → <span class="token function">RefundPending</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> → <span class="token function">Refunded</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token function">Failed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 失敗 / 終端狀態</span>

<span class="token comment">// 事件（Trigger）</span>
PaySucceeded<span class="token punctuation">,</span> PayFailed<span class="token punctuation">,</span> StartRefund<span class="token punctuation">,</span> RefundSucceeded<span class="token punctuation">,</span> RefundFailed</code>`),s(p);var e=t(p,6),i=n(e);a(i,()=>`<code class="language-csharp">
<span class="token comment">// 建立 FSM</span>
<span class="token class-name"><span class="token keyword">var</span></span> fsm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PaymentStateMachine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PaymentState<span class="token punctuation">)</span>order<span class="token punctuation">.</span>State<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析金流商回傳碼</span>
<span class="token class-name">PaymentTrigger<span class="token punctuation">?</span></span> t <span class="token operator">=</span> dto<span class="token punctuation">.</span>ReturnCode <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"0000"</span> <span class="token operator">=></span> PaySucceeded<span class="token punctuation">,</span>
    <span class="token string">"1165"</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">,</span>         <span class="token comment">// 不轉移，維持 Pending</span>
     _     <span class="token operator">=></span> PayFailed
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span> fsm<span class="token punctuation">.</span><span class="token function">Fire</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 交易寫 DB 前</span>
order<span class="token punctuation">.</span>State            <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>fsm<span class="token punctuation">.</span>CurrentState<span class="token punctuation">;</span>
vendorPayment<span class="token punctuation">.</span>PayState <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>fsm<span class="token punctuation">.</span>CurrentState<span class="token punctuation">;</span>

<span class="token comment">// 回應前端也看 fsm.CurrentState</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>fsm<span class="token punctuation">.</span>CurrentState<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> PaymentState<span class="token punctuation">.</span>Paid<span class="token punctuation">:</span>     <span class="token comment">// 成功</span>
    <span class="token keyword">case</span> PaymentState<span class="token punctuation">.</span>Pending<span class="token punctuation">:</span>  <span class="token comment">// 等待</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token comment">// 失敗</span>
<span class="token punctuation">&#125;</span></code>`),s(e);var c=t(e,4),d=n(c);a(d,()=>`<code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fsm<span class="token punctuation">.</span><span class="token function">CanFire</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"非法動作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fsm<span class="token punctuation">.</span><span class="token function">Fire</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(c),P(6),h(u,o)}const Rn=Object.freeze(Object.defineProperty({__proto__:null,default:Dn,metadata:J},Symbol.toStringTag,{value:"Module"})),z={title:"LeetCode SQL 50",date:"2025-07-24",category:"software",subCategory:"Database",tags:["database","leetcode","sql"],slug:"db_leetcode50"},{title:Os,date:Ts,category:As,subCategory:Ps,tags:xs,slug:Ls}=z;var En=w('<h6>練習練習練習</h6> <hr/> <h3><a href="https://leetcode.com/problems/managers-with-at-least-5-direct-reports/description/?envType=study-plan-v2&amp;envId=top-sql-50" rel="nofollow">570. Manager…</a></h3> <p>GROUP BY + HAVING 選出符合條件值當作 where 條件</p> <pre class="language-sql"><!></pre> <h3><a href="https://leetcode.com/problems/confirmation-rate/description/?envType=study-plan-v2&amp;envId=top-sql-50" rel="nofollow">1934. Confirmation Rate</a></h3> <p>用 GROUP BY + function 做出一張暫時表單 join 到主表，再處理 IFNULL 的邏輯</p> <pre class="language-sql"><!></pre> <h3><a href="https://leetcode.com/problems/monthly-transactions-i/description/?envType=study-plan-v2&amp;envId=top-sql-50" rel="nofollow">1193. Monthly Transactions I</a></h3> <p>熟悉在SELECT欄位可一起使用到的語法</p> <pre class="language-sql"><!></pre> <h3><a href="https://leetcode.com/problems/immediate-food-delivery-ii/?envType=study-plan-v2&amp;envId=top-sql-50" rel="nofollow">1174. Immediate Food Delivery II</a></h3> <p>先用 GROUPBY + MIN(DATE) 找到顧客的首筆訂單，但因為是聚合函數，無法直接帶出該筆訂單的 delivery_id ，再用 Duplicate ID key 找出該對應的原始表欄位。</p> <pre class="language-sql"><!></pre> <h3><a href="https://leetcode.com/problems/employees-whose-manager-left-the-company/?envType=study-plan-v2&amp;envId=top-sql-50" rel="nofollow">1978. Employees Whose Manager Left the Company</a></h3> <p>利用 left join 會填補 null 的特性去篩選出欄位</p> <pre class="language-sql"><!></pre> <h3><a href="https://leetcode.com/problems/movie-rating/description/?envType=study-plan-v2&amp;envId=top-sql-50" rel="nofollow">1341. Movie Rating</a></h3> <p>取同一個變數名稱 results + 練習 LIMIT + 雙排序</p> <pre class="language-sql"><!></pre> <h3><a href="https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends/description/?envType=study-plan-v2&amp;envId=top-sql-50" rel="nofollow">602. Friend Requests II: Who Has the Most Friends</a></h3> <p>總數可直接用 requester_id + accepter_id 加總來處理，所以先用 UNION ALL 攤平就好處理了</p> <pre class="language-sql"><!></pre>',1);function On(u){var o=En(),p=t(v(o),8),r=n(p);a(r,()=>`<code class="language-sql"><span class="token keyword">SELECT</span> name
<span class="token keyword">FROM</span> Employee
<span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> managerId
    <span class="token keyword">FROM</span> Employee
    <span class="token keyword">WHERE</span> managerId <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> managerId
    <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(p);var e=t(p,6),i=n(e);a(i,()=>`<code class="language-sql"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> 
       IFNULL<span class="token punctuation">(</span>aa<span class="token punctuation">.</span>confirmation_rate<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> confirmation_rate
<span class="token keyword">FROM</span> Signups <span class="token keyword">AS</span> s
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
      user_id<span class="token punctuation">,</span>
      <span class="token function">ROUND</span><span class="token punctuation">(</span>
        <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">action</span> <span class="token operator">=</span> <span class="token string">'confirmed'</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span>
        <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">2</span>
      <span class="token punctuation">)</span> <span class="token keyword">AS</span> confirmation_rate
    <span class="token keyword">FROM</span> Confirmations
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_id
<span class="token punctuation">)</span> <span class="token keyword">AS</span> aa
<span class="token keyword">ON</span> s<span class="token punctuation">.</span>user_id <span class="token operator">=</span> aa<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span></code>`),s(e);var c=t(e,6),d=n(c);a(d,()=>`<code class="language-sql"><span class="token keyword">SELECT</span> 
    DATE_FORMAT<span class="token punctuation">(</span>trans_date<span class="token punctuation">,</span> <span class="token string">'%Y-%m'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">month</span><span class="token punctuation">,</span>
    country<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> trans_count<span class="token punctuation">,</span>
    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> state <span class="token operator">=</span> <span class="token string">'approved'</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> approved_count<span class="token punctuation">,</span>
    <span class="token function">SUM</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> trans_total_amount<span class="token punctuation">,</span>
    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> state <span class="token operator">=</span> <span class="token string">'approved'</span> <span class="token keyword">THEN</span> amount <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> approved_total_amount
<span class="token keyword">FROM</span> 
    <span class="token keyword">Transactions</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 
    DATE_FORMAT<span class="token punctuation">(</span>trans_date<span class="token punctuation">,</span> <span class="token string">'%Y-%m'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    country<span class="token punctuation">;</span></code>`),s(c);var l=t(c,6),y=n(l);a(y,()=>`<code class="language-sql"><span class="token keyword">SELECT</span>
  <span class="token function">ROUND</span><span class="token punctuation">(</span>
    <span class="token function">SUM</span><span class="token punctuation">(</span>order_date <span class="token operator">=</span> customer_pref_delivery_date<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">2</span>
  <span class="token punctuation">)</span> <span class="token keyword">AS</span> immediate_percentage
<span class="token keyword">FROM</span> Delivery
<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>customer_id<span class="token punctuation">,</span> order_date<span class="token punctuation">)</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> customer_id<span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> Delivery
  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> customer_id
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(l);var k=t(l,6),m=n(k);a(m,()=>`<code class="language-sql"><span class="token keyword">select</span> e1<span class="token punctuation">.</span>employee_id
<span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token operator">*</span>
    <span class="token keyword">from</span> Employees
    <span class="token keyword">where</span> salary <span class="token operator">&lt;</span> <span class="token number">30000</span> <span class="token operator">AND</span> manager_id <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>
    <span class="token keyword">order</span> <span class="token keyword">by</span> employee_id
<span class="token punctuation">)</span> <span class="token keyword">as</span> e1
<span class="token keyword">left</span> <span class="token keyword">join</span> Employees <span class="token keyword">as</span> e2
<span class="token keyword">on</span> e1<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> e2<span class="token punctuation">.</span>employee_id
<span class="token keyword">where</span> e2<span class="token punctuation">.</span>employee_id <span class="token operator">is</span> <span class="token boolean">null</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> employee_id <span class="token keyword">asc</span></code>`),s(k);var g=t(k,6),b=n(g);a(b,()=>`<code class="language-sql"><span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> name <span class="token keyword">AS</span> results
  <span class="token keyword">FROM</span> Users u
  <span class="token keyword">JOIN</span> MovieRating r <span class="token keyword">ON</span> u<span class="token punctuation">.</span>user_id <span class="token operator">=</span> r<span class="token punctuation">.</span>user_id
  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span>user_id
  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> name <span class="token keyword">ASC</span>
  <span class="token keyword">LIMIT</span> <span class="token number">1</span>
<span class="token punctuation">)</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> title <span class="token keyword">AS</span> results
  <span class="token keyword">FROM</span> Movies m
  <span class="token keyword">JOIN</span> MovieRating r <span class="token keyword">ON</span> m<span class="token punctuation">.</span>movie_id <span class="token operator">=</span> r<span class="token punctuation">.</span>movie_id
  <span class="token keyword">WHERE</span> r<span class="token punctuation">.</span>created_at <span class="token operator">BETWEEN</span> <span class="token string">'2020-02-01'</span> <span class="token operator">AND</span> <span class="token string">'2020-02-29'</span>
  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> m<span class="token punctuation">.</span>movie_id<span class="token punctuation">,</span> m<span class="token punctuation">.</span>title
  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">AVG</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>rating<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>title <span class="token keyword">ASC</span>
  <span class="token keyword">LIMIT</span> <span class="token number">1</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(g);var f=t(g,6),S=n(f);a(S,()=>`<code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num
<span class="token keyword">FROM</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> requester_id <span class="token keyword">AS</span> id <span class="token keyword">FROM</span> RequestAccepted
  <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
  <span class="token keyword">SELECT</span> accepter_id <span class="token keyword">AS</span> id <span class="token keyword">FROM</span> RequestAccepted
<span class="token punctuation">)</span> <span class="token keyword">AS</span> all_ids
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span>
<span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span></code>`),s(f),h(u,o)}const Tn=Object.freeze(Object.defineProperty({__proto__:null,default:On,metadata:z},Symbol.toStringTag,{value:"Module"})),W={title:"資料庫正規化",date:"2025-07-24",category:"software",subCategory:"Database",tags:["database","normalization","sql"],slug:"db_normalization"},{title:Ns,date:Fs,category:Ms,subCategory:$s,tags:js,slug:Us}=W;var An=w(`<h6>透過拆分、建立正確的鍵與相依關係來消除資料重複與異常的設計原則</h6> <hr/> <h2>正規化等級</h2> <p>1NF 每個欄位都必須是原子值（不可包含多值，例如逗號分隔或陣列）</p> <pre class="language-text"><!></pre> <p>2NF 滿足 1NF，所有非主鍵欄位必須完全依賴主鍵，不能只依賴主鍵的一部分（常發生在複合主鍵情況）</p> <p>錯誤 (複合主鍵 OrderID + ProductID，但 OrderDate 只依賴 OrderID)</p> <pre class="language-text"><!></pre> <p>因為 OrderDate 只依賴 OrderID，所以應該從明細表中拆出來，存放在訂單主檔中。</p> <pre class="language-text"><!></pre> <p>3NF 滿足 2NF 非主鍵欄位不能依賴其他非主鍵欄位（即無傳遞依賴）</p> <p>錯誤：這裡 DeptName 是依賴 DeptID，但 DeptID 不是主鍵 → 傳遞依賴</p> <pre class="language-text"><!></pre> <p>正確做法：將 DeptID → DeptName 拆到 Department 表</p> <pre class="language-text"><!></pre> <p>BCNF（Boyce-Codd Normal Form / 3.5NF）滿足 3NF，所有函數依賴的左側必須是超鍵（Super Key）</p> <p>錯誤 (Course → Room、Instructor → Room 同時存在，但都不是超鍵，則違反 BCNF。)</p> <pre class="language-text"><!></pre> <p>拆成兩張表，每個依賴的左側都變成主鍵（超鍵）：</p> <pre class="language-text"><!></pre> <p>4NF 無多值依賴（Multivalued Dependency），若一欄對應多值且彼此無關，應拆表避免組合膨脹</p> <p>錯誤 Crust 與 Area 無關，造成笛卡兒組合</p> <pre class="language-text"><!></pre> <p>正確 拆成兩張表</p> <pre class="language-text"><!></pre> <p>5NF 滿足 4NF，並確保將資料拆成多個子關係後，再重新 join 回來時不會產生多餘資料（避免 join loss）。
常見於 三元以上關聯（例如三欄組合關係）。</p> <p>假設你用以下三張表建構資料：</p> <pre class="language-text"><!></pre> <p>在滿足 5NF 的設計中，會保留一張三元關聯表來表達實際的資料：</p> <pre class="language-text"><!></pre>`,1);function Pn(u){var o=An(),p=t(v(o),8),r=n(p);a(r,()=>`<code class="language-text">錯誤
UserId | Hobby
-------|--------
1      | &quot;reading, swimming, coding&quot;

正確
UserId | Hobby
-------|--------
1      | reading
1      | swimming
1      | coding</code>`),s(p);var e=t(p,6),i=n(e);a(i,()=>`<code class="language-text">OrderID | ProductID | OrderDate
--------|-----------|------------
1001    | A1        | 2025-07-01
1001    | A2        | 2025-07-01</code>`),s(e);var c=t(e,4),d=n(c);a(d,()=>`<code class="language-text">-- 訂單主檔（Order）
OrderID | OrderDate
--------|------------
1001    | 2025-07-01

-- 訂單明細檔（OrderDetail）
OrderID | ProductID
--------|-----------
1001    | A1
1001    | A2</code>`),s(c);var l=t(c,6),y=n(l);a(y,()=>`<code class="language-text">StudentID | DeptID | DeptName
----------|--------|----------
1001      | D01    | Computer Science</code>`),s(l);var k=t(l,4),m=n(k);a(m,()=>`<code class="language-text">StudentID | DeptID
----------|--------
1001      | D01
1002      | D02

DeptID | DeptName
-------|--------------------
D01    | Computer Science
D02    | Electrical Engineering</code>`),s(k);var g=t(k,6),b=n(g);a(b,()=>`<code class="language-text">Course | Instructor | Room
-------|------------|-----
DB     | Smith      | R1
DB     | Jones      | R2</code>`),s(g);var f=t(g,4),S=n(f);a(S,()=>`<code class="language-text">-- 課程與教室（CourseRoom）
Course | Room
-------|-----
DB     | R1

-- 講師與教室（InstructorRoom）
Instructor | Room
-----------|-----
Smith      | R1</code>`),s(f);var _=t(f,6),R=n(_);a(R,()=>`<code class="language-text">錯誤
Restaurant | Crust   | Area
-----------|---------|--------
X Pizza    | Thick   | Downtown
X Pizza    | Stuffed | Downtown
X Pizza    | Thick   | Uptown
X Pizza    | Stuffed | Uptown</code>`),s(_);var C=t(_,4),E=n(C);a(E,()=>`<code class="language-text">Restaurant | Crust
Restaurant | Area</code>`),s(C);var I=t(C,6),T=n(I);a(T,()=>`<code class="language-text">-- Supplier-Part
S1 | P1

-- Supplier-Project
S1 | J1

-- Part-Project
P1 | J1

-- 拼出來的關聯（有可能是錯的）
Supplier | Part | Project
---------|------|---------
S1       | P1   | J1  （合理）
S1       | P1   | J2  （若 J2 並不屬於 P1）</code>`),s(I);var D=t(I,4),A=n(D);a(A,()=>`<code class="language-text">-- Supplier-Part-Project
Supplier | Part | Project
---------|------|---------
S1       | P1   | J1</code>`),s(D),h(u,o)}const xn=Object.freeze(Object.defineProperty({__proto__:null,default:Pn,metadata:W},Symbol.toStringTag,{value:"Module"})),Y={title:"關聯式資料庫",date:"2025-06-22",category:"software",subCategory:"Database",tags:["database","db","sql"],slug:"db_relational"},{title:qs,date:Hs,category:Bs,subCategory:Vs,tags:Xs,slug:Gs}=Y;var Ln=w('<pre class="language-pgsql"><!></pre> <p>連接 SQL Server 時是透過 TDS（Tabular Data Stream）的通訊協定來交換資料。</p> <ul><li>TDS 是 SQL Server 專用的底層通訊協定，負責在用戶端與資料庫伺服器之間傳遞</li> <li>通常透過 TCP/IP 傳輸，預設使用的連接埠為 1433。</li> <li>用戶端要連接資料庫時，會使用一段 Connection String（連線字串）</li></ul> <pre class="language-pgsql"><!></pre> <h3>Table（資料表）</h3> <p>資料表是資料的儲存核心，每個表由「列（row）」與「欄（column）」構成。</p> <pre class="language-sql"><!></pre> <h3>Primary Key（主鍵）</h3> <p>能唯一標識每一筆資料，一張表只能有一個主鍵，可以是單一欄位或多欄位組成（複合主鍵）。</p> <pre class="language-sql"><!></pre> <h3>Unique Constraint（唯一約束）</h3> <p>限制欄位值不能重複，一張表可以有多個唯一欄位。</p> <pre class="language-sql"><!></pre> <h3>Foreign Key（外鍵）</h3> <pre class="language-sql"><!></pre> <h3>Index（索引）</h3> <p>加速查詢效率，類似書本的目錄，索引可以建立在單一欄位或多個欄位上。</p> <pre class="language-sql"><!></pre>',1);function Nn(u){var o=Ln(),p=v(o),r=n(p);a(r,()=>`<code class="language-pgsql">SQL Server Instance
├── Database
│   ├── Schema
│   │   ├── Table
│   │   ├── View
│   │   ├── Stored Procedure
│   │   ├── Function
│   │   ├── Synonym
│   │   └── Permissions / Roles
│   └── Security Settings
└── System Databases (master, msdb, model, tempdb)</code>`),s(p);var e=t(p,6),i=n(e);a(i,()=>'<code class="language-pgsql">Server=127.0.0.1,1433;Database=MyDb;User Id=sa;Password=MyPassword;TrustServerCertificate=True;</code>'),s(e);var c=t(e,6),d=n(c);a(d,()=>`<code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Users <span class="token punctuation">(</span>
    Id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    UserName NVARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    Email NVARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    CreatedAt <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(c);var l=t(c,6),y=n(l);a(y,()=>`<code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Users
<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> PK_Users <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(l);var k=t(l,6),m=n(k);a(m,()=>`<code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Products <span class="token punctuation">(</span>
    ProductId <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    SKU NVARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(k);var g=t(k,4),b=n(g);a(b,()=>`<code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Orders <span class="token punctuation">(</span>
    OrderId <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    UserId <span class="token keyword">INT</span><span class="token punctuation">,</span>
    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>UserId<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Users<span class="token punctuation">(</span>Id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(g);var f=t(g,6),S=n(f);a(S,()=>'<code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> IDX_Users_UserName <span class="token keyword">ON</span> Users<span class="token punctuation">(</span>UserName<span class="token punctuation">)</span><span class="token punctuation">;</span></code>'),s(f),h(u,o)}const Fn=Object.freeze(Object.defineProperty({__proto__:null,default:Nn,metadata:Y},Symbol.toStringTag,{value:"Module"})),Q={title:"SQL Command",date:"2025-06-22",category:"software",subCategory:"Database",tags:["database","db","sql"],slug:"db_sql"},{title:Js,date:zs,category:Ws,subCategory:Ys,tags:Qs,slug:Ks}=Q;var Mn=w('<h3>特性</h3> <ul><li>同步執行：必須有結果才會繼續，報錯會停止。</li> <li>四大分類：<code>SELECT</code> / <code>INSERT</code> / <code>UPDATE</code> / <code>DELETE</code></li> <li><strong>SELECT</strong>：從資料表中篩出符合條件的資料，組成一張新結果表（結果集）。</li></ul> <h3>查詢最小單元範例</h3> <pre class="language-sql"><!></pre> <h3>常用子句與函數</h3> <ul><li><code>WHERE</code>：條件篩選</li> <li><code>ORDER BY</code>：排序</li> <li><code>LIMIT</code> / <code>TOP</code>：只取前幾筆（需搭配 <code>ORDER BY</code>）</li> <li><code>DISTINCT</code>：唯一值</li> <li><code>LIKE</code>：模糊搜尋</li> <li><code>AS</code>：欄位命名別名</li> <li><code>GROUP BY</code> + <code>HAVING</code>：群組後條件</li> <li>聚合函數：<code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MAX</code>, <code>MIN</code></li></ul> <h3>LEFT JOIN</h3> <p><code>LEFT JOIN = INNER JOIN + 左表未對應資料（右表為 NULL）</code></p> <h3>RIGHT JOIN</h3> <p>同 <code>LEFT JOIN</code>，只是語法方向相反</p> <h3>FULL OUTER JOIN</h3> <p><code>LEFT JOIN</code> + <code>RIGHT JOIN</code>（合併後去重）</p> <h3>CROSS JOIN</h3> <p>所有組合（兩表 row 數乘積）</p> <p><strong>應用場景：</strong></p> <table><thead><tr><th>Color</th><th>Size</th></tr></thead><tbody><tr><td>Red</td><td>S</td></tr><tr><td>Red</td><td>M</td></tr><tr><td>Red</td><td>L</td></tr><tr><td>Blue</td><td>S</td></tr><tr><td>Blue</td><td>M</td></tr><tr><td>Blue</td><td>L</td></tr></tbody></table> <h3>SELF JOIN</h3> <pre class="language-sql"><!></pre> <p>同一張表內查上下屬關係</p> <h3>APPLY（SQL Server 專用）</h3> <ul><li><code>CROSS APPLY</code>：類似 <code>INNER JOIN</code>，但可動態過濾副表</li> <li><code>OUTER APPLY</code>：類似 <code>LEFT JOIN</code>，但可動態過濾副表</li></ul>',1);function $n(u){var o=Mn(),p=t(v(o),6),r=n(p);a(r,()=>`<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> status_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> email <span class="token keyword">FROM</span> users<span class="token punctuation">;</span></code>`),s(p);var e=t(p,28),i=n(e);a(i,()=>`<code class="language-sql"><span class="token keyword">SELECT</span> 
  A<span class="token punctuation">.</span>name <span class="token keyword">AS</span> employee<span class="token punctuation">,</span>
  B<span class="token punctuation">.</span>name <span class="token keyword">AS</span> manager
<span class="token keyword">FROM</span> Employees A
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Employees B <span class="token keyword">ON</span> A<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> B<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code>`),s(e),P(6),h(u,o)}const jn=Object.freeze(Object.defineProperty({__proto__:null,default:$n,metadata:Q},Symbol.toStringTag,{value:"Module"})),K={title:"POS機金流處理",date:"2025-06-22",category:"software",subCategory:"開發筆記",tags:["金流","backend","payment"],slug:"cashflow"},{title:Zs,date:na,category:sa,subCategory:aa,tags:ta,slug:pa}=K;var Un=w(`<h6>POS機金流商串接流程</h6> <hr/> <p><a href="https://github.com/cao0085/code-pattern/tree/main/cashflow" rel="nofollow">相關程式碼</a></p> <h3>實踐重點</h3> <ul><li><strong>交易一致性</strong>：更新多張表時務必使用 Transaction。</li> <li><strong>完整留痕</strong>：Request/Response 原文（或至少摘要＋關鍵欄位）存檔，方便日後對帳與疑難排解。</li> <li><strong>Idempotency</strong>：以自家訂單編號（orderId）做遞送重試時的唯一索引，避免重複請款/退款。</li> <li><strong>錯誤碼映射表</strong>：將 PP 的 ReturnCode 對應到自家錯誤碼與訊息，集中管理。</li> <li><strong>人工介入流程</strong>：人工處理的狀況，要有後台工具或警示流程。</li> <li><strong>查詢補償機制</strong>：定時 Job/手動工具執行 Query，同步漏單、退款差額。</li></ul> <h3>主要流程</h3> <p><code>Request =&gt; Pre-commit / record original state =&gt; Response Logging =&gt; State Machine =&gt; Commit</code></p> <p><code>*** pp = Payment Provider</code></p> <h3>發送交易 / 退款</h3> <h3>HTTP Request Skeleton</h3> <ul><li>依 PP 文件將必要 Header（例如 ChannelId / Secret…）與 Body JSON 組起來。</li> <li>這層邏輯最好抽成共用：<code>GenerateProviderRequest(method, url, envConfig)</code>。</li> <li>若有簽章/加密，放在這層集中處理（本案沒有，就預留 Hook）。</li></ul> <pre class="language-csharp"><!></pre> <h3>Pre-commit</h3> <p>先在自家 DB 建立一筆「金流交易主檔（含交易序號、金額、初始狀態等），<code>Commit()</code> 後再呼叫 PP，若網路或對方故障，你仍有一筆記錄可查，方便後續查詢/補單/人工處理。</p> <pre class="language-csharp"><!></pre> <h3>SendRequest</h3> <p><code>SendRequestAsync(req)</code> 後，先檢查是否為預期內的回應(成功/失敗…)，記錄 Log（含狀態碼與錯誤訊息）</p> <pre class="language-csharp"><!></pre> <h3>State Machine</h3> <p>邏輯判斷回傳資訊，與 DB 互動（更新狀態、寫入明細）包在 Transaction 中，確保一致性。</p> <pre class="language-csharp"><!></pre> <br/> <h3>查詢交易狀態</h3> <p>若在發送請求時遇到網路異常、非預期回應，通常會用查詢確認金流商最新狀態，把金流商回應的狀態和自家資料庫比對/修改。</p> <p>這邊可以根據自己的需求定義成純查詢/查詢必定同步更新等等。</p> <br/> <h3>Finite State Machine</h3> <p>金流處理也適合導入有限狀態機的概念，因為資料變更會是有條件的例如</p> <ul><li><p>付款待確認
-可變成: 付款成功、付款失敗、付款取消
-不可變成: 退款、退款失敗</p></li> <li><p>付款成功
-可變成: 退款、退款失敗
-不可變成: 付款待確認、付款失敗、付款取消</p></li></ul> <p>…</p>`,1);function qn(u){var o=Un(),p=t(v(o),22),r=n(p);a(r,()=>`<code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">,</span> fullUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> req<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryAddWithoutValidation</span><span class="token punctuation">(</span><span class="token string">"X-Provider-Id"</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>ChannelId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> req<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryAddWithoutValidation</span><span class="token punctuation">(</span><span class="token string">"X-Provider-Secret"</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>Secret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span> req<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>bodyJson<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(p);var e=t(p,6),i=n(e);a(i,()=>'<code class="language-csharp">db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span>payInfo<span class="token punctuation">)</span></code>'),s(e);var c=t(e,6),d=n(c);a(d,()=>`<code class="language-csharp"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>HttpCompletionOption<span class="token punctuation">.</span>ResponseHeadersRead<span class="token punctuation">,</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(c);var l=t(c,6),y=n(l);a(y,()=>`<code class="language-csharp"><span class="token keyword">switch</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ReturnCode<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">"0000"</span><span class="token punctuation">:</span> <span class="token comment">// 成功處理 =></span>
    <span class="token keyword">case</span> <span class="token string">"1165"</span><span class="token punctuation">:</span> <span class="token comment">// 失敗處理 =></span>
    <span class="token keyword">case</span> <span class="token string">"xxxx"</span><span class="token punctuation">:</span> <span class="token comment">// 例外處理 ...</span>
    <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> transaction<span class="token punctuation">.</span><span class="token function">CommitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> Response<span class="token punctuation">;</span></code>`),s(l),P(18),h(u,o)}const Hn=Object.freeze(Object.defineProperty({__proto__:null,default:qn,metadata:K},Symbol.toStringTag,{value:"Module"})),Z={title:"Download PDF",date:"2025-06-22",category:"software",subCategory:"開發筆記",tags:["pdf","js","dom"],slug:"jsPDF"},{title:oa,date:ea,category:ca,subCategory:la,tags:ua,slug:ka}=Z;var Bn=w('<h6>紀錄下載影像相關處理</h6> <hr/> <h3>畫面截圖（html2canvas、dom-to-image…）</h3> <p>原理大多是用<code>document.query(ID / class)</code>抓取指定的<code>DOM</code>，在套件內<strong>模擬</strong>JS排版樣式引擎(所以可能會跑版)，繪圖在 HTML<code>&lt;canvas&gt;</code>Element 後再轉成 base64/Blob 格式輸出。</p> <p>要注意的是瀏覽器對於能當作繪製<code>&lt;canvas&gt;</code>的來源控管較為嚴格，例如在瀏覽器渲染的 img 來源可以使用，套件內被擋下來的問題，再來就是錯誤是發生在套件內部不好除錯。</p> <h3>向量型（jsPDF、pdf-lib…）</h3> <p>用程式碼直接描述格線、文字 ，也可以插入圖片當作背景。要注意的一樣是外部來源的合法(圖片、字體)，圖片可先在.js 轉換成 base64 當作來源給套件使用，減少套件內轉換失敗的風險。</p> <h3>jsPDF</h3> <p>添加字體方式有兩種方式讀取.ttf和.js，一樣讓套件讀取處理過的資源部屬比較穩定</p> <p>網站下載 .ttf 字體向量檔案</p> <pre class="language-js"><!></pre> <p>把 .ttf 轉成.js 再import到模組，因為字型檔案很大要用到再載入就好</p> <pre class="language-js"><!></pre> <p>圖片轉URL</p> <pre class="language-js"><!></pre> <p>下載和預覽</p> <pre class="language-js"><!></pre> <p><a href="https://github.com/cao0085/code-pattern/tree/main/fronted-pdf-download" rel="nofollow">相關程式碼</a></p>',1);function Vn(u){var o=Bn(),p=t(v(o),20),r=n(p);a(r,()=>`<code class="language-js"><span class="token comment">// var pdfDoc = 建立一個 jsPDF 提供的物件(&#123; unit: 'mm', format: 'a4' &#125;)</span>
pdfDoc<span class="token punctuation">.</span><span class="token function">addFont</span><span class="token punctuation">(</span><span class="token string">'./eduSong_Unicode.ttf'</span><span class="token punctuation">,</span> <span class="token string">'eduSong_Unicode'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pdfDoc<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token string">'eduSong_Unicode'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(p);var e=t(p,4),i=n(e);a(i,()=>`<code class="language-js"><span class="token comment">// 有呼叫函式再import</span>
<span class="token keyword">async</span> <span class="token function">ensurePdfLib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若 import 過就不動作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pdfReady<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pdfReady<span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>pdfReady <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName:"pdf-bundle" */</span> <span class="token string">'jspdf'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName:"pdf-bundle" */</span> <span class="token string">'@/assets/fonts/eduSong_Unicode-normal.js'</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>mod<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> mod<span class="token punctuation">.</span>jsPDF <span class="token operator">||</span> mod<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pdfReady<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token comment">// var pdfDoc = 建立一個 jsPDF 提供的物件(&#123; unit: 'mm', format: 'a4' &#125;)</span>
pdfDoc<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token string">'eduSong_Unicode'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(e);var c=t(e,4),d=n(c);a(d,()=>`<code class="language-js"><span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>targetImage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
        img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject<span class="token punctuation">;</span>
        img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

<span class="token comment">// 讀取圖片</span>
<span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>targetImage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 先轉成 Base64 Data URL</span>
<span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> img<span class="token punctuation">.</span>naturalWidth <span class="token operator">||</span> img<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> img<span class="token punctuation">.</span>naturalHeight <span class="token operator">||</span> img<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
<span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dataUrl <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/jpeg'</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 加入 jsPDF 當作底稿</span>
pdfDoc<span class="token punctuation">.</span><span class="token function">addImage</span><span class="token punctuation">(</span>dataUrl<span class="token punctuation">,</span> <span class="token string">'JPEG'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">297</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pdfDoc<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token string">'eduSong_Unicode'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(c);var l=t(c,4),y=n(l);a(y,()=>`<code class="language-js"><span class="token keyword">const</span> blob <span class="token operator">=</span> pdfDoc<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">'blob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pdfUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可插入 DOM </span>
pdfDoc<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"fileName.pdf"</span><span class="token punctuation">)</span></code>`),s(l),P(2),h(u,o)}const Xn=Object.freeze(Object.defineProperty({__proto__:null,default:Vn,metadata:Z},Symbol.toStringTag,{value:"Module"})),nn={title:"XLSL Excel",date:"2025-06-22",category:"software",subCategory:"開發筆記",tags:["XLSL","js","Excel"],slug:"xlsx_excel"},{title:ra,date:ia,category:da,subCategory:ga,tags:ma,slug:ya}=nn;var Gn=w('<h6><a href="https://www.npmjs.com/package/xlsx/v/0.14.1?activeTab=readme" rel="nofollow">xlsx 0.14.1</a></h6> <hr/> <h3>Workbook & Worksheet</h3> <p>單個 Workbook 實例代表一份完整的xsml檔案，Worksheet 代表一頁 xsml的分頁，都可以產多個。</p> <pre class="language-js"><!></pre> <h3>Sheet Content</h3> <pre class="language-js"><!></pre> <h3>Merges</h3> <p>指定哪些儲存格要上下合併</p> <pre class="language-js"><!></pre> <h3>多列合併實作</h3> <ul><li>假設有一筆一對多的資料列</li> <li>分割/合併儲存格的方式在EXCEL上呈現</li></ul> <br/> <p>先處理資料結構</p> <pre class="language-js"><!></pre> <p>處理合併欄位</p> <pre class="language-js"><!></pre> <p>完整流程</p> <pre class="language-js"><!></pre>',1);function Jn(u){var o=Gn(),p=t(v(o),8),r=n(p);a(r,()=>`<code class="language-js"><span class="token keyword">import</span> <span class="token constant">XLSX</span> <span class="token keyword">from</span> <span class="token string">'xlsx'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">export_xsml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Workbook 1: 包含 Sheet1</span>
  <span class="token keyword">const</span> workbook1 <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sheet1 <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">aoa_to_sheet</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'s1_1'</span><span class="token punctuation">,</span> <span class="token string">'s1_2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_append_sheet</span><span class="token punctuation">(</span>workbook1<span class="token punctuation">,</span> sheet1<span class="token punctuation">,</span> <span class="token string">'sheet1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Workbook 2: 包含 Sheet1、Sheet2</span>
  <span class="token keyword">const</span> workbook2 <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sheet2 <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">aoa_to_sheet</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'s2_1'</span><span class="token punctuation">,</span> <span class="token string">'s2_2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_append_sheet</span><span class="token punctuation">(</span>workbook2<span class="token punctuation">,</span> sheet1<span class="token punctuation">,</span> <span class="token string">'sheet1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_append_sheet</span><span class="token punctuation">(</span>workbook2<span class="token punctuation">,</span> sheet2<span class="token punctuation">,</span> <span class="token string">'sheet2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 匯出兩個檔案</span>
  <span class="token comment">// 一個檔案一個分頁</span>
  <span class="token constant">XLSX</span><span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>workbook1<span class="token punctuation">,</span> <span class="token string">'learning1.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 一個檔案兩個分頁</span>
  <span class="token constant">XLSX</span><span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>workbook2<span class="token punctuation">,</span> <span class="token string">'learning2.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(p);var e=t(p,4),i=n(e);a(i,()=>`<code class="language-js"><span class="token comment">// Array of Arrays, AOA</span>
<span class="token comment">// data 放入 2 維度陣列 [[row1],[row2],[row3]...]</span>
<span class="token comment">// [row1] => 'A1','B1','C1'....</span>
<span class="token comment">// options => &#123; origin: 'B2' &#125; 指定座標</span>
<span class="token keyword">const</span> ws_array <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">aoa_to_sheet</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 每一個物件會轉成一列（row）</span>
<span class="token comment">// key 會自動變成表頭欄位 // row1</span>
<span class="token keyword">const</span> ws_json <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">json_to_sheet</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// row2</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// row3</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">json_to_sheet</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 明確指定欄位順序（會取代自動推斷）</span>
  <span class="token literal-property property">skipHeader</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       <span class="token comment">// 是否要略過產生表頭（預設 false）</span>
  <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">'B2'</span>             <span class="token comment">// 從 B2 開始填入</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`),s(e);var c=t(e,6),d=n(c);a(d,()=>`<code class="language-js"><span class="token comment">// s = start / e = end / A1 = &#123;x:0,y:0&#125; / A3 = &#123;x:2,y:0&#125;</span>
worksheet<span class="token punctuation">[</span><span class="token string">'!merges'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">s</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> 
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 也可以指定座標</span>
<span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">decode_range</span><span class="token punctuation">(</span><span class="token string">'A1:A3'</span><span class="token punctuation">)</span>
</code>`),s(c);var l=t(c,10),y=n(l);a(y,()=>`<code class="language-js"><span class="token keyword">const</span> orderList <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">OrderNo</span><span class="token operator">:</span> <span class="token string">'A001'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Customer</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Items</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token string">'鉛筆'</span><span class="token punctuation">,</span> <span class="token literal-property property">Quantity</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token string">'原子筆'</span><span class="token punctuation">,</span> <span class="token literal-property property">Quantity</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">OrderNo</span><span class="token operator">:</span> <span class="token string">'A002'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Customer</span><span class="token operator">:</span> <span class="token string">'小美'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Items</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token string">'橡皮擦'</span><span class="token punctuation">,</span> <span class="token literal-property property">Quantity</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> flattenedList <span class="token operator">=</span> orderList<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">order</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> items <span class="token operator">=</span> order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>length <span class="token operator">?</span> order<span class="token punctuation">.</span>Items <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>order<span class="token punctuation">,</span>
    <span class="token operator">...</span>item<span class="token punctuation">,</span>
    <span class="token literal-property property">_rowCount</span><span class="token operator">:</span> items<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token comment">// 紀錄有幾筆資料</span>
    <span class="token literal-property property">_isFirst</span><span class="token operator">:</span> index <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">// 添加新屬性標記</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 資料攤平後會</span>
<span class="token keyword">const</span> flattenedList <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">OrderNo</span><span class="token operator">:</span> <span class="token string">'A001'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Customer</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token string">'鉛筆'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Quantity</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_rowCount</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_isFirst</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">OrderNo</span><span class="token operator">:</span> <span class="token string">'A001'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Customer</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token string">'原子筆'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Quantity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_rowCount</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_isFirst</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">OrderNo</span><span class="token operator">:</span> <span class="token string">'A002'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Customer</span><span class="token operator">:</span> <span class="token string">'小美'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token string">'橡皮擦'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Quantity</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_rowCount</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_isFirst</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`),s(l);var k=t(l,4),m=n(k);a(m,()=>`<code class="language-js"><span class="token keyword">const</span> exportKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'OrderNo'</span><span class="token punctuation">,</span> <span class="token string">'Customer'</span><span class="token punctuation">,</span> <span class="token string">'Product'</span><span class="token punctuation">,</span> <span class="token string">'Quantity'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Table Header</span>
<span class="token keyword">const</span> mergeKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'OrderNo'</span><span class="token punctuation">,</span> <span class="token string">'Customer'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 指定的合併欄位</span>
<span class="token keyword">const</span> dataOffset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 指定 Y 軸起始座標</span>
<span class="token keyword">const</span> merges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存放資料</span>

flattenedList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> rowIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// 用剛剛的 _isFirst 判斷是否為第一筆</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>_isFirst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 總共合併的列數</span>
    <span class="token keyword">const</span> rowspan <span class="token operator">=</span> row<span class="token punctuation">.</span>_rowCount<span class="token punctuation">;</span> 
    mergeKeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 鎖定該X軸</span>
      <span class="token keyword">const</span> colIndex <span class="token operator">=</span> exportKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">if</span> <span class="token punctuation">(</span>colIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rowspan <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 關鍵是利用 ForEach 中的 rowIndex 保持 Y 軸該擺放的位置</span>
        <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">encode_cell</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">r</span><span class="token operator">:</span> rowIndex <span class="token operator">+</span> dataOffset<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> colIndex <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">encode_cell</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">r</span><span class="token operator">:</span> rowIndex <span class="token operator">+</span> dataOffset <span class="token operator">+</span> rowspan <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> colIndex <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        merges<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>end<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`),s(k);var g=t(k,4),b=n(g);a(b,()=>`<code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">XLSX</span> <span class="token keyword">from</span> <span class="token string">'xlsx'</span><span class="token punctuation">;</span>

<span class="token comment">// === 1. 建立 worksheet from JSON，指定欄位與起始位置 ===</span>
<span class="token keyword">const</span> worksheet <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">json_to_sheet</span><span class="token punctuation">(</span>flattenedList<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">header</span><span class="token operator">:</span> exportKeys<span class="token punctuation">,</span>
  <span class="token literal-property property">skipHeader</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">'A2'</span> <span class="token comment">// 表示資料從 A2 開始填（A1 為表頭）</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// === 2. 加入欄位表頭於 A1 ===</span>
exportKeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> cellRef <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">encode_cell</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A1, B1, ...</span>
  worksheet<span class="token punctuation">[</span>cellRef<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">t</span><span class="token operator">:</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token literal-property property">v</span><span class="token operator">:</span> key <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 你可改成中文名</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// === 3. 計算合併欄位範圍 ===</span>
<span class="token keyword">const</span> merges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
flattenedList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> rowIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>_isFirst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> rowspan <span class="token operator">=</span> row<span class="token punctuation">.</span>_rowCount<span class="token punctuation">;</span>
    mergeKeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> colIndex <span class="token operator">=</span> exportKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>colIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rowspan <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> r1 <span class="token operator">=</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 因為 origin: 'A2'，rowIndex 0 是第2列</span>
        <span class="token keyword">const</span> r2 <span class="token operator">=</span> r1 <span class="token operator">+</span> rowspan <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        merges<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">s</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">r</span><span class="token operator">:</span> r1<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> colIndex <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">r</span><span class="token operator">:</span> r2<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> colIndex <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worksheet<span class="token punctuation">[</span><span class="token string">'!merges'</span><span class="token punctuation">]</span> <span class="token operator">=</span> merges<span class="token punctuation">;</span>

<span class="token comment">// 可選：欄寬</span>
worksheet<span class="token punctuation">[</span><span class="token string">'!cols'</span><span class="token punctuation">]</span> <span class="token operator">=</span> exportKeys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">wch</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// === 4. 建立 workbook 並加入 worksheet ===</span>
<span class="token keyword">const</span> workbook <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_append_sheet</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> worksheet<span class="token punctuation">,</span> <span class="token string">'Sheet1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// === 5. 匯出 ===</span>
<span class="token keyword">const</span> wbout <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">bookType</span><span class="token operator">:</span> <span class="token string">'xlsx'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'binary'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">s2ab</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> view<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> buf<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">saveAs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">s2ab</span><span class="token punctuation">(</span>wbout<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'application/octet-stream'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">report_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.xlsx</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(g),h(u,o)}const zn=Object.freeze(Object.defineProperty({__proto__:null,default:Jn,metadata:nn},Symbol.toStringTag,{value:"Module"})),sn={title:"Basic",date:"2025-06-22",category:"software",subCategory:"Domain-Driven Design",tags:["DDD","backend","design"],slug:"ddd_layer"},{title:fa,date:wa,category:ha,subCategory:va,tags:ba,slug:_a}=sn;var Wn=w(`<h6>事件目的為核心設計模式 Domain-Driven Design</h6> <hr/> <h3>網路層 (Web / Controller)</h3> <p>接收 HTTP Request 入口和 <strong>實例轉發(消息)控制器</strong> 的層面，僅作為轉發者（Request Dispatcher）指定事件指令&回傳格式，不做商業邏輯處理。</p> <pre class="language-csharp"><!></pre> <h3>應用層 (Application / Logic)</h3> <p>主要負責實作 Command / Query / Handler 等指令消息物件，處理商業邏輯。</p> <p><strong>Handler 主要負責</strong></p> <ul><li>取得並操作 Domain 層定義的 Aggregate / Value Object</li> <li>結合外部輸入（如 Request Body DTO），執行業務流程與驗證邏輯</li> <li>將驗證後的資料傳遞至 Infrastructure ，進行資料存取(Repository)或第三方(AuthService)互動</li></ul> <p><strong>實作讀寫分離（CQRS）</strong></p> <ul><li>讀取邏輯（Query + Handler） 可透過 IReadRepository / ReadModel / ViewModel</li> <li>將 Read 專用 Repository Interface 也放置在 Application 層，避免對 Domain 汙染</li></ul> <p><strong>資料物件模型（Data Transfer Object）</strong></p> <ul><li>與 Domain Model（Aggregate / ValueObject）分離，不承擔任何商業規則驗證</li> <li>可搭配 FluentValidation 先進行格式驗證</li> <li>也可作為 Request body/Response 輸出格式 Mapping 對象</li></ul> <h3>事件核心層 (Domain)</h3> <p>DDD 架構的核心，必須完全獨立、不依賴其他層（如 Application / Infrastructure），所有核心邏輯、商業規則、狀態控制都應封裝在這一層。</p> <p><strong>Aggregate Root（聚合根）</strong></p> <ul><li>代表一組關聯物件的 一致性邊界（Consistency Boundary）</li> <li>定義資料規格與唯一性規則（如 ID）</li> <li>驗證狀態轉移是否合理</li> <li>維護領域不變式（Invariant）</li></ul> <p><strong>Value Object（值物件）</strong></p> <ul><li>沒有識別性（ID），補強 Aggregate 的欄位定義，確保欄位規則（格式、範圍）正確性</li> <li>通常不可變（Immutable），常用於輸入驗證與例外處理</li></ul> <p><strong>Factory</strong></p> <ul><li>專責建立 新的 Aggregate 實體，將複雜的初始化規則封裝起來</li> <li>集中初始化的邏輯、避免外部自行 new 對象產生違規狀態</li></ul> <p><strong>Domain Event</strong></p> <ul><li>Aggregate 發出、由 Application Layer 的 Handler 處理後續流程（例如通知、同步、儲存等）</li> <li>保持單向依賴（Domain 發出事件，不處理後續）</li></ul> <p><strong>Interface</strong></p> <ul><li>在 Domain 中定義對外依賴的介面（如 IUserRepository、INotificationService）</li> <li>實作則由 Infrastructure 層提供，以支援 依賴反轉（DIP）原則，讓 Domain 不耦合具體技術細節</li></ul> <h3>基礎層（Infrastructure）</h3> <p>基礎設施 DI Injection & DBContext & Repositroy & Service(JWT) & Outbox …等
同時負責實作 Domain 定義的介面，並將應用程式所需的各類依賴透過 依賴注入（DI） 註冊進容器中。</p>`,1);function Yn(u){var o=Wn(),p=t(v(o),8),r=n(p);a(r,()=>`<code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">RegisterUserCommand</span> command<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(p),P(44),h(u,o)}const Qn=Object.freeze(Object.defineProperty({__proto__:null,default:Yn,metadata:sn},Symbol.toStringTag,{value:"Module"})),an={title:"Mediator",date:"2025-06-22",category:"software",subCategory:"Domain-Driven Design",tags:["DDD","backend","design"],slug:"ddd_mediator"},{title:Ca,date:Sa,category:Ia,subCategory:Da,tags:Ra,slug:Ea}=an;var Kn=w(`<h6>事件驅動搭配中介者模式</h6> <hr/> <h2>MediatR</h2> <p>用於應用程式內部模組之間的指令與事件傳遞，運作於主記憶體中不需外部中介。自身架構處理 Command、Query、Domain Event，也可擴充 IPipelineBehavior 實作驗證、日誌、監控等。若搭配 Outbox 實作，亦可延伸為可靠事件傳遞模式。</p> <pre class="language-csharp"><!></pre> <p>放入自定義的<strong>Command</strong>後，會自動註冊所有 <code>IRequestHandler&lt;,&gt;</code>、<code>INotificationHandler&lt;&gt;</code> 相關的 Handler</p> <pre class="language-csharp"><!></pre> <p><strong>Send 流程（Command / Query）</strong></p> <pre class="language-csharp"><!></pre> <p>背後處理步驟：</p> <ol><li>呼叫 Send() → 取得 command 型別（如 LoginUserCommand）</li> <li>檢查快取中有沒有 RequestHandlerWrapper<code>&lt;LoginUserCommand, TResult&gt;</code></li> <li>若無，透過反射產生 Wrapper 並快取</li> <li>Wrapper 使用 DI container (ServiceFactory) 找出對應的 LoginUserCommandHandler</li> <li>包上所有 IPipelineBehavior（如 Logging / Validation）</li> <li>呼叫 Handle() 執行實際邏輯</li></ol> <p><strong>Publish 流程（Event）</strong></p> <p>會呼叫所有註冊的 INotificationHandler<code>&lt;UserLoggedInNotification&gt;</code> 處理器
適合用於事件廣播 / DomainEvent 傳遞（例如搭配 Outbox）</p> <pre class="language-csharp"><!></pre> <p><strong>Controller 呼叫</strong></p> <pre class="language-csharp"><!></pre> <p><strong>IPipelineBehavior</strong></p> <p>MediatR 在處理 Send() 時，會把整個流程包裝在一連串的 IPipelineBehavior<code>&lt;TRequest, TResponse&gt;</code> 中，最後才執行真正的 Handle() 方法。</p> <p><code>Client → [LoggingBehavior] → [ValidationBehavior] → CommandHandler.Handle()</code></p> <p>每一個 Behavior 都像 Middleware，可以：</p> <ul><li>做前置驗證（FluentValidation）</li> <li>加入日誌記錄（ILogger）</li> <li>加入監控（OpenTelemetry, AppInsights）</li> <li>加入自定義錯誤處理、授權檢查</li></ul> <pre class="language-csharp"><!></pre> <br/> <h2>MassTransit</h2> <p>適合分散式系統中的服務間訊息通訊，需外部 message broker（如 RabbitMQ、Kafka）。支援 Command / Event 發送，可串接 Retry、延遲隊列、DeadLetter 等進階功能，常用於微服務間傳遞資料、非同步背景處理等情境。</p> <pre class="language-csharp"><!></pre> <pre class="language-csharp"><!></pre> <p><strong>Send()</strong></p> <pre class="language-csharp"><!></pre> <p><strong>Publish()</strong></p> <pre class="language-csharp"><!></pre> <p><strong>Middleware pipeline</strong></p> <pre class="language-csharp"><!></pre> <pre class="language-csharp"><!></pre>`,1);function Zn(u){var o=Kn(),p=t(v(o),8),r=n(p);a(r,()=>`<code class="language-csharp"><span class="token comment">//.csproj</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"MediatR"</span> Version<span class="token operator">=</span><span class="token string">"12.5.0"</span> <span class="token operator">/</span><span class="token operator">></span>

<span class="token comment">//Program.cs</span>
builder<span class="token punctuation">.</span><span class="token function">InstallMediatR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(p);var e=t(p,4),i=n(e);a(i,()=>`<code class="language-csharp"><span class="token comment">// Infrastructure/Installers/MediatRInstaller.cs</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InstallMediatR</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">WebApplicationBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span>cfg <span class="token operator">=></span>
    <span class="token punctuation">&#123;</span>
        cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterServicesFromAssemblyContaining</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LoginUserCommand<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterServicesFromAssemblyContaining</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RefreshTokenCommand<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(e);var c=t(e,4),d=n(c);a(d,()=>'<code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoginUserCommand</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>'),s(c);var l=t(c,10),y=n(l);a(y,()=>'<code class="language-csharp"><span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserLoggedInNotification</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>'),s(l);var k=t(l,4),m=n(k);a(m,()=>`<code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">LoginUserCommand</span> command<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(k);var g=t(k,12),b=n(g);a(b,()=>`<code class="language-csharp">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LoggingBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(g);var f=t(g,8),S=n(f);a(S,()=>`<code class="language-csharp"><span class="token comment">// .csproj</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"MassTransit.AspNetCore"</span> Version<span class="token operator">=</span><span class="token string">"8.1.2"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"MassTransit.RabbitMQ"</span> Version<span class="token operator">=</span><span class="token string">"8.1.2"</span> <span class="token operator">/</span><span class="token operator">></span></code>`),s(f);var _=t(f,2),R=n(_);a(R,()=>`<code class="language-csharp"><span class="token comment">// Program.cs</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMassTransit</span><span class="token punctuation">(</span>x <span class="token operator">=></span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 自動註冊所有的消費者 (Consumer)</span>
    <span class="token comment">// 表示該層級專案</span>
    x<span class="token punctuation">.</span><span class="token function">AddConsumers</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CreateUserConsumer</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token function">UsingRabbitMq</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token punctuation">&#123;</span>
        cfg<span class="token punctuation">.</span><span class="token function">Host</span><span class="token punctuation">(</span><span class="token string">"rabbitmq://localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cfg<span class="token punctuation">.</span><span class="token function">ConfigureEndpoints</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自動綁定 queue</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(_);var C=t(_,4),E=n(C);a(E,()=>'<code class="language-csharp"><span class="token keyword">await</span> _sendEndpoint<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateInvoice</span> <span class="token punctuation">&#123;</span> OrderId <span class="token operator">=</span> <span class="token string">"123"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>'),s(C);var I=t(C,4),T=n(I);a(T,()=>'<code class="language-csharp"><span class="token keyword">await</span> _publishEndpoint<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserCreated</span> <span class="token punctuation">&#123;</span> UserId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>'),s(I);var D=t(I,4),A=n(D);a(A,()=>`<code class="language-csharp">cfg<span class="token punctuation">.</span><span class="token function">ConfigureMediator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 驗證資料結構</span>
        cfg<span class="token punctuation">.</span><span class="token function">UseConsumeFilter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationFilter<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>type <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HasInterface</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cfg<span class="token punctuation">.</span><span class="token function">UseConsumeFilter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LoggingFilter<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>type <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HasInterface</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cfg<span class="token punctuation">.</span><span class="token function">UseConsumeFilter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">RedisFilter<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>type <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HasInterface</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cfg<span class="token punctuation">.</span><span class="token function">UseConsumeFilter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">EventsFilter<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>type <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HasInterface</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cfg<span class="token punctuation">.</span><span class="token function">UseConsumeFilter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HtmlSanitizerFilter<span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> x <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>type <span class="token operator">=></span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HasInterface</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(D);var O=t(D,2),L=n(O);a(L,()=>`<code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IPublishEndpoint</span> publishEndpoint<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> publishEndpoint<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateUser</span> <span class="token punctuation">&#123;</span> UserName <span class="token operator">=</span> <span class="token string">"tony"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">"Published!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(O),h(u,o)}const ns=Object.freeze(Object.defineProperty({__proto__:null,default:Zn,metadata:an},Symbol.toStringTag,{value:"Module"})),tn={title:"Outbox Message",date:"2025-06-23",category:"software",subCategory:"Domain-Driven Design",tags:["DDD","backend","design"],slug:"ddd_outbox"},{title:Oa,date:Ta,category:Aa,subCategory:Pa,tags:xa,slug:La}=tn;var ss=w('<h6>拆分主副邏輯，同時保持資料同步性</h6> <hr/> <h2>SideEffect</h2> <p>若把 DDD 流程中的主副行為拆分：</p> <ul><li>創建員工帳戶的時候 <code>&lt;TABLE_Employee&gt;</code> 新增一筆資料</li> <li>幫對應到的 <code>&lt;TABLE_Department&gt;_Headcount</code> 總人數加一</li></ul> <br/> <p>若是以依照 MVC 架構會是</p> <pre class="language-csharp"><!></pre> <p>用 DDD 寫則變成是</p> <pre class="language-csharp"><!></pre> <p>假設創建員工帳號變為須更新 5-10 張表單,函式會越來越巨大、複雜且難以測試與維護。透過 DDD 的 Domain Event 拆解副作用邏輯可異步處理，減少主流程延遲。</p> <h2>ASIO 原子性（Atomicity of Side-Effect & IO）</h2> <p>剛剛提到的行為，主邏輯成功時無法保證所有副作用（如更新部門、發送通知等）都成功執行，這違反了分散系統中常見的 資料一致性與原子性要求。</p> <p>解決方法是設計一張資料庫新表<code>&lt;DB_Outbox_Message&gt;</code>，在一筆交易中提交主邏輯與事件，且把事件訊息<code>(Event、Payload、Time)</code>寫入這張表。這樣執行失敗也有紀錄可以查驗，也可設計失敗的 Retry 機制。</p> <br/> <p>主要實踐方法是用背景應用重複執行，訪問 DB_Outbox_Message 執行該事件</p> <pre class="language-csharp"><!></pre>',1);function as(u){var o=ss(),p=t(v(o),14),r=n(p);a(r,()=>`<code class="language-csharp">db_Employee<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
db_Department<span class="token punctuation">.</span><span class="token function">AddOrUpdate</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> data<span class="token punctuation">.</span>DepartmentId<span class="token punctuation">,</span> dept <span class="token operator">=></span> dept<span class="token punctuation">.</span>HandCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(p);var e=t(p,4),i=n(e);a(i,()=>`<code class="language-csharp"><span class="token comment">// Application Layer</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Unit<span class="token punctuation">></span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">CreateEmployeeCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> employee <span class="token operator">=</span> Employee<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> command<span class="token punctuation">.</span>DepartmentId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> _employeeRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> _unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 儲存 Employee 的同時，Outbox 事件也一併儲存</span>

    <span class="token keyword">return</span> Unit<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Employee</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name">Guid</span> departmentId<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Employee</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> departmentId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    employee<span class="token punctuation">.</span><span class="token function">RaiseDomainEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EmployeeCreatedDomainEvent</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> departmentId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> employee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeCreatedHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotificationHandler<span class="token punctuation">&lt;</span>EmployeeCreatedDomainEvent<span class="token punctuation">></span></span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">EmployeeCreatedDomainEvent</span> evt<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dept <span class="token operator">=</span> <span class="token keyword">await</span> _departmentRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>DepartmentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dept<span class="token punctuation">.</span><span class="token function">IncreaseHeadcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> _unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(e);var c=t(e,14),d=n(c);a(d,()=>`<code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutboxDispatcherBackgroundService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BackgroundService</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IServiceProvider</span> _serviceProvider<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>OutboxDispatcherBackgroundService<span class="token punctuation">></span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">OutboxDispatcherBackgroundService</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">,</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>OutboxDispatcherBackgroundService<span class="token punctuation">></span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        _serviceProvider <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stoppingToken<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> _serviceProvider<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BaseDbContext<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> mediator <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMediator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> messages <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>OutboxMessages
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=></span>
                    m<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token string">"Pending"</span> <span class="token operator">&amp;&amp;</span>
                    m<span class="token punctuation">.</span>RetryCount <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>MaxRetry<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span>stoppingToken<span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> msg <span class="token keyword">in</span> messages<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"CleanDDD.Domain.Users.Events.</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">msg<span class="token punctuation">.</span>EventType</span><span class="token punctuation">&#125;</span></span><span class="token string">, CleanDDD.Domain"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        msg<span class="token punctuation">.</span>Status <span class="token operator">=</span> <span class="token string">"Failed"</span><span class="token punctuation">;</span>
                        msg<span class="token punctuation">.</span>LastError <span class="token operator">=</span> <span class="token string">"❌ Cannot resolve event type."</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token class-name"><span class="token keyword">var</span></span> evt <span class="token operator">=</span> <span class="token punctuation">(</span>INotification<span class="token punctuation">?</span><span class="token punctuation">)</span>JsonSerializer<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>PayloadJson<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>evt <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        msg<span class="token punctuation">.</span>Status <span class="token operator">=</span> <span class="token string">"Failed"</span><span class="token punctuation">;</span>
                        msg<span class="token punctuation">.</span>LastError <span class="token operator">=</span> <span class="token string">"❌ Cannot deserialize event."</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">await</span> mediator<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>evt<span class="token punctuation">,</span> stoppingToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    msg<span class="token punctuation">.</span>Status <span class="token operator">=</span> <span class="token string">"Sent"</span><span class="token punctuation">;</span>
                    msg<span class="token punctuation">.</span>ProcessedAt <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    msg<span class="token punctuation">.</span>RetryCount<span class="token operator">++</span><span class="token punctuation">;</span>
                    msg<span class="token punctuation">.</span>LastError <span class="token operator">=</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>RetryCount <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        msg<span class="token punctuation">.</span>Status <span class="token operator">=</span> <span class="token string">"DeadLetter"</span><span class="token punctuation">;</span>
                        _logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"⚠️ Outbox event </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">msg<span class="token punctuation">.</span>Id</span><span class="token punctuation">&#125;</span></span><span class="token string"> marked as DeadLetter after 3 retries."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">&#123;</span>
                        msg<span class="token punctuation">.</span>NextAttemptAt <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow <span class="token operator">+</span> <span class="token function">GetRetryDelay</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>RetryCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$"❌ Failed to process outbox event </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">msg<span class="token punctuation">.</span>Id</span><span class="token punctuation">&#125;</span></span><span class="token string"> (RetryCount: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">msg<span class="token punctuation">.</span>RetryCount</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>stoppingToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stoppingToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">TimeSpan</span> <span class="token function">GetRetryDelay</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> retryCount<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1min → 2min → 4min → 最多 15min</span>
        <span class="token class-name"><span class="token keyword">var</span></span> delayMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> retryCount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span>delayMinutes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(c),h(u,o)}const ts=Object.freeze(Object.defineProperty({__proto__:null,default:as,metadata:tn},Symbol.toStringTag,{value:"Module"})),pn={title:"Basic",date:"2025-06-22",category:"software",subCategory:"Angular18",tags:["fronted","angular","layout"],slug:"angular_basic"},{title:Na,date:Fa,category:Ma,subCategory:$a,tags:ja,slug:Ua}=pn;var ps=w(`<h6>參考這個<a href="https://github.com/mbejda/AngularFire-Starter-Template" rel="nofollow">專案範本</a>、官方文件學習</h6> <hr/> <p><a href="https://github.com/cao0085/angular-18" rel="nofollow">練習Repository</a></p> <pre class="language-shell"><!></pre> <h3>.component.ts</h3> <p>Component是Angular核心，負責收集要渲染的資料和掛載到指定節點，邏輯函式也是寫在這一層。</p> <pre class="language-ts"><!></pre> <h3>.component.html</h3> <pre class="language-html"><!></pre> <h3>表單處理</h3> <p>傳統資料流處理</p> <p><code>點擊輸入文字 -&gt; 觸發 'input' event -&gt; Calls setValue() -&gt; 'valueChanges' event to observers -&gt; Observers</code></p> <br/> <p>Angular 內保持雙向同步有兩種做法</p> <ol><li><p>Reactive forms (新版主流)</p> <p><code>點擊輸入文字 -&gt; 觸發 FormControl</code></p> <p><code>1. -&gt; Fires a 'valueChanges' event to observers -&gt; Observers</code></p> <p><code>2. -&gt; Notifies the ControlValueAccessor -&gt; Updates the DataValue</code></p></li></ol> <ol start="2"><li><p>Template-Driven forms (NgModel)</p> <p><code>點擊輸入文字 -&gt; 觸發 'input' event -&gt; ControlValueAccessor</code></p> <p><code>1. -&gt; Calls setValue() on the FormControl -&gt; Fires a 'valueChanges' event to observers -&gt; Observers</code></p> <p><code>2. -&gt; Calls viewToModelUpdate() -&gt; NgModel -&gt; Emits an ngModelChange event -&gt; Component -&gt; Component</code></p></li></ol> <p>驗證</p> <pre class="language-js"><!></pre> <pre class="language-js"><!></pre> <h3>投影 Content Projection</h3> <p>主要是讓元件的導入方可以自訂內容插入到這個元件中，就像 React 的 <code>props.children</code>。適合「UI 容器元件 + 插槽」的場景，例如 Dialog、Card、Tab、Layout 等常見 UI 元件。</p> <p>元件容器</p> <pre class="language-ts"><!></pre> <p>使用元件</p> <pre class="language-ts"><!></pre> <p>指定該 ClassName 去插入內容取代<code>ng-content</code>,且若沒被指定到<code>ng-content</code>也不會占位</p> <pre class="language-ts"><!></pre> <pre class="language-html"><!></pre>`,1);function os(u){var o=ps(),p=t(v(o),6),r=n(p);a(r,()=>`<code class="language-shell">ng generate component hello-world

src/app/hello-world/
├── hello-world.component.ts
├── hello-world.component.html
├── hello-world.component.css
└── hello-world.component.spec.ts</code>`),s(p);var e=t(p,6),i=n(e);a(i,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    selector<span class="token operator">:</span> <span class="token string">"app-item"</span><span class="token punctuation">,</span> <span class="token comment">// 目標的根節點,類似選擇器</span>
    standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否為獨立組件</span>
    imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    templateUrl<span class="token operator">:</span> <span class="token string">"./item.component.html"</span><span class="token punctuation">,</span> <span class="token comment">// 要 render 的 html element</span>
    styleUrl<span class="token operator">:</span> <span class="token string">"./item.component.css"</span><span class="token punctuation">,</span> <span class="token comment">// 同上</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// 傳統JS程式碼寫在這裡 </span>
    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ItemComponent</span> <span class="token punctuation">&#123;</span>
    
        title <span class="token operator">=</span> <span class="token string">"todo"</span><span class="token punctuation">;</span>
        filter<span class="token operator">:</span> <span class="token string">"all"</span> <span class="token operator">|</span> <span class="token string">"active"</span> <span class="token operator">|</span> <span class="token string">"done"</span> <span class="token operator">=</span> <span class="token string">"all"</span><span class="token punctuation">;</span>
        allItems <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span> description<span class="token operator">:</span> <span class="token string">"eat"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span> description<span class="token operator">:</span> <span class="token string">"sleep"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span> description<span class="token operator">:</span> <span class="token string">"play"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span> description<span class="token operator">:</span> <span class="token string">"laugh"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// 當 filter 改變屬性 return 不同值,用法和 React setState 有點像</span>
        <span class="token keyword">get</span> <span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">"all"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allItems<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allItems<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">"done"</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>done <span class="token operator">:</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>done
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token function">addItem</span><span class="token punctuation">(</span>description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>allItems<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                description<span class="token punctuation">,</span>
                done<span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span></code>`),s(e);var c=t(e,4),d=n(c);a(d,()=>`<code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 拿 Component 的 items 來當 Arrary + Render to Element --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>My To Do List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>What would you like to do today?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let item of items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.description&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

        <span class="token comment">&lt;!-- 新增 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addItemInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What would you like to do today?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
            <span class="token attr-name">#newItem</span>
            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add an item<span class="token punctuation">"</span></span>
            <span class="token attr-name">(keyup.enter)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addItem(newItem.value); newItem.value = <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg-text-input<span class="token punctuation">"</span></span>
            <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addItemInput<span class="token punctuation">"</span></span>
        <span class="token punctuation">/></span></span>

        <span class="token comment">&lt;!-- 導入方法 addItem(param) --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addItem(newItem.value)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`),s(c);var l=t(c,18),y=n(l);a(y,()=>`<code class="language-js"><span class="token comment">// 依序放入同步/非同步自定義驗證規則</span>
<span class="token comment">// [fieldInitialValue, syncValidators?, asyncValidators?]</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>fb<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">fieldName</span><span class="token operator">:</span> <span class="token punctuation">[</span>initialValue<span class="token punctuation">,</span> syncValidators<span class="token punctuation">,</span> asyncValidators<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(l);var k=t(l,2),m=n(k);a(m,()=>`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FormControl<span class="token punctuation">,</span>FormsModule<span class="token punctuation">,</span> ReactiveFormsModule<span class="token punctuation">,</span> FormBuilder<span class="token punctuation">,</span> FormGroup <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Validators <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">'app-form'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">standalone</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span>ReactiveFormsModule<span class="token punctuation">,</span>FormsModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">'./form.component.html'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">styleUrl</span><span class="token operator">:</span> <span class="token string">'./form.component.css'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormComponent</span> <span class="token punctuation">&#123;</span>
  categories <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'music'</span><span class="token punctuation">,</span>  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Music'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'movie'</span><span class="token punctuation">,</span>  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Movie'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'book'</span><span class="token punctuation">,</span>   <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Book'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token literal-property property">searchForm</span><span class="token operator">:</span> FormGroup<span class="token punctuation">;</span>
  newOptionValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">'initial value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> <span class="token literal-property property">fb</span><span class="token operator">:</span> FormBuilder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 建立兩個控制項：category 與 title</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>searchForm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fb<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>categories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> Validators<span class="token punctuation">.</span>required<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Validators<span class="token punctuation">.</span>required<span class="token punctuation">,</span> Validators<span class="token punctuation">.</span><span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchForm<span class="token punctuation">.</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'表單驗證未通過'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>searchForm<span class="token punctuation">.</span><span class="token function">markAllAsTouched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 觸發所有欄位的 touched</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'表單資料:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>searchForm<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span></code>`),s(k);var g=t(k,8),b=n(g);a(b,()=>`<code class="language-ts"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-card'</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
    &lt;div class="card">
      &lt;div class="card-header">
        &lt;ng-content select="[card-header]">&lt;/ng-content>
      &lt;/div>
      &lt;div class="card-body">
        &lt;ng-content>&lt;/ng-content> &lt;!-- 預設內容 -->
      &lt;/div>
    &lt;/div>
  </span><span class="token template-punctuation string">&#96;</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CardComponent</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code>`),s(g);var f=t(g,4),S=n(f);a(S,()=>`<code class="language-ts"><span class="token operator">&lt;</span>app<span class="token operator">-</span>card<span class="token operator">></span>
  <span class="token operator">&lt;</span>div card<span class="token operator">-</span>header<span class="token operator">></span>卡片標題<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span>這是卡片的主體內容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>card<span class="token operator">></span></code>`),s(f);var _=t(f,4),R=n(_);a(R,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'my-dialog'</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
    &lt;div class="dialog">
      &lt;div class="dialog-header" *ngIf="hasHeader">
        &lt;ng-content select="[dialog-header]">&lt;/ng-content>
      &lt;/div>
      &lt;div class="dialog-body" *ngIf="hasBody">
        &lt;ng-content select="[dialog-body]">&lt;/ng-content>
      &lt;/div>
      &lt;div class="dialog-footer" *ngIf="hasFooter">
        &lt;ng-content select="[dialog-footer]">&lt;/ng-content>
      &lt;/div>
    &lt;/div>
  </span><span class="token template-punctuation string">&#96;</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DialogComponent</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Angular 無法直接偵測 ng-content 是否有內容，只能用 JS 側邊處理</span>
  hasHeader <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  hasBody <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  hasFooter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(_);var C=t(_,2),E=n(C);a(E,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-dialog</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dialog-header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>標題<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dialog-body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>這是內容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token comment">&lt;!-- 若不寫 footer，就不會出現空的 footer --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-dialog</span><span class="token punctuation">></span></span></code>`),s(C),h(u,o)}const es=Object.freeze(Object.defineProperty({__proto__:null,default:os,metadata:pn},Symbol.toStringTag,{value:"Module"})),on={title:"Http Observable",date:"2025-06-22",category:"software",subCategory:"Angular18",tags:["http","angular","api"],slug:"angular_http_observable"},{title:qa,date:Ha,category:Ba,subCategory:Va,tags:Xa,slug:Ga}=on;var cs=w('<h6>RxJS Observable</h6> <hr/> <p>在 Angular 裡，HttpClient 的每個方法都會回傳一個 RxJS Observable，這些 Observable 屬於 cold 類型 —— 在訂閱（subscribe）時才真正發送請求。</p> <p>多次訂閱同一個 Observable 會觸發多次獨立的後端呼叫；若在請求途中解除訂閱，Angular 會直接 中止（abort）尚未完成的 HTTP 連線。</p> <pre class="language-js"><!></pre> <p>簡易封裝才可以靈活使用 pipe()、switchMap() …</p> <pre class="language-js"><!></pre> <h3>Observable 常見 Method</h3> <table><thead><tr><th>Operator</th><th>用途說明</th></tr></thead><tbody><tr><td><code>map()</code></td><td>資料轉換，取出你要的欄位、格式化資料</td></tr><tr><td><code>tap()</code></td><td>執行副作用（不改變資料），常用來 <code>console.log</code>, 設定 loading</td></tr><tr><td><code>switchMap()</code></td><td>用一筆資料觸發下一個 Observable，並自動取消舊的</td></tr><tr><td><code>mergeMap()</code></td><td>觸發下一個 Observable，但不取消前一筆（適合併發）</td></tr><tr><td><code>catchError()</code></td><td>錯誤處理，不讓錯誤中斷整個流程</td></tr><tr><td><code>finalize()</code></td><td>無論成功/失敗，最後一定會執行（常用來清除狀態）</td></tr><tr><td><code>retry(n)</code></td><td>API 失敗時，自動重試 n 次</td></tr><tr><td><code>timeout(ms)</code></td><td>若 Observable 超過時間未完成，會自動報錯</td></tr><tr><td><code>debounceTime(ms)</code></td><td>等使用者輸入穩定後才送出請求（防抖）</td></tr></tbody></table> <pre class="language-js"><!></pre>',1);function ls(u){var o=cs(),p=t(v(o),8),r=n(p);a(r,()=>`<code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/getExportData'</span><span class="token punctuation">)</span>
  <span class="token comment">// 邏輯排程</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token comment">// Step 1. 拿取 res.data</span>
    <span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'step1 response:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token string">'report.pdf'</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">of</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 語法 of() 傳遞參數給下一個動作</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// Step 2. 接收參數&amp;觸發下一隻API</span>
    <span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'step2 filename:'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/confirmDownloaded'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">file</span><span class="token operator">:</span> filename <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// 觸發執行</span>
  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全部流程完成'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`),s(p);var e=t(p,4),i=n(e);a(i,()=>`<code class="language-js"><span class="token comment">// src/app/core/api/api.service.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Injectable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HttpClient<span class="token punctuation">,</span> HttpParams <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/common/http'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> environment <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../../environments/environment'</span><span class="token punctuation">;</span>

@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">providedIn</span><span class="token operator">:</span> <span class="token string">'root'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> readonly baseUrl <span class="token operator">=</span> environment<span class="token punctuation">.</span>apiBaseUrl<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> <span class="token literal-property property">http</span><span class="token operator">:</span> HttpClient</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> httpParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpParams</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">fromObject</span><span class="token operator">:</span> params <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span>get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">params</span><span class="token operator">:</span> httpParams <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  post<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span>post<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  put<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span>put<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">delete</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span>delete<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(e);var c=t(e,6),d=n(c);a(d,()=>`<code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span>get<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'/api/users'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//tap：觸發副作用（如顯示 loading）</span>
    
    <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// map：轉換回傳資料結構，拿出你需要的部分</span>
    
    <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// retry：API 失敗時最多重試 2 次</span>
    
    <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// timeout：超過 5 秒沒回應就報錯</span>
    
    <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// catchError：攔截錯誤，避免流程中止</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>toast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'API 失敗'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">return</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回傳預設空陣列，保持 UI 正常</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
    <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// finalize：成功或失敗都會執行，關閉 loading 狀態</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// subscribe：最終資料回來後綁定到畫面</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`),s(c),h(u,o)}const us=Object.freeze(Object.defineProperty({__proto__:null,default:ls,metadata:on},Symbol.toStringTag,{value:"Module"})),en={title:"Router",date:"2025-06-22",category:"software",subCategory:"Angular18",tags:["route","angular","api"],slug:"angular_router"},{title:Ja,date:za,category:Wa,subCategory:Ya,tags:Qa,slug:Ka}=en;var ks=w('<h6>參考這個<a href="https://github.com/mbejda/AngularFire-Starter-Template" rel="nofollow">專案範本</a>、官方文件學習</h6> <hr/> <p>專案起始 index.html</p> <pre class="language-html"><!></pre> <p>元件去抓專案的根節點，render的內容用<code>&lt;router-outlet&gt;</code>佔位</p> <pre class="language-ts"><!></pre> <p>Route</p> <p>設定該路由(Path) <code>&lt;router-outlet&gt;</code>映射的元件</p> <pre class="language-ts"><!></pre> <p>且若添加 children 屬性擇該 映射的元件 裡面也可以再放一個佔位</p> <pre class="language-ts"><!></pre> <pre class="language-html"><!></pre> <h3>Route順序和路由守衛</h3> <p>Angular自帶跳轉和瀏覽權限設定，可自行放入<code>canActivate[]</code>裡面做邏輯判斷</p> <pre class="language-ts"><!></pre>',1);function rs(u){var o=ks(),p=t(v(o),6),r=n(p);a(r,()=>`<code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>MyAngular18App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>`),s(p);var e=t(p,4),i=n(e);a(i,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterOutlet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-root'</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterOutlet<span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token string">'&lt;router-outlet>&lt;/router-outlet>'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code>`),s(e);var c=t(e,6),d=n(c);a(d,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Routes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> LayoutComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./layout/layout.component'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> LayoutComponent<span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
        <span class="token function-variable function">loadComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@features/home/home.component'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=></span> m<span class="token punctuation">.</span>HomeComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>
        <span class="token function-variable function">loadComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./features/about/about.component'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=></span> m<span class="token punctuation">.</span>AboutComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>
        path<span class="token operator">:</span> <span class="token string">'form'</span><span class="token punctuation">,</span>
        <span class="token function-variable function">loadComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
          <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@features/form/form.component'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=></span> m<span class="token punctuation">.</span>FormComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`),s(c);var l=t(c,4),y=n(l);a(y,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> SidePanelComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./side-panel/side-panel.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FooterComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./footer/footer.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterOutlet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-layout'</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    SidePanelComponent<span class="token punctuation">,</span>
    FooterComponent<span class="token punctuation">,</span>
    RouterOutlet<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">'./layout.component.html'</span><span class="token punctuation">,</span>
  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./layout.component.css'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LayoutComponent</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code>`),s(l);var k=t(l,2),m=n(k);a(m,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-side-panel</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-side-panel</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-outlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-outlet</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-footer</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`),s(k);var g=t(k,6),b=n(g);a(b,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Routes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> LoginComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./auth/login/login.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RegisterComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./auth/register/register.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DashboardComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./pages/dashboard/dashboard.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ForgotPasswordComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./auth/forgot-password/forgot-password.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>MainLayoutComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./layouts/main-layout/main-layout.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>AlertsComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./pages/alerts/alerts.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ButtonsComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./pages/buttons/buttons.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>authGuard<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./guards/auth.guard'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>logoutGuard<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./guards/logout.guard'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// Path mapping 會照順序檢查</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> redirectTo<span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span> pathMatch<span class="token operator">:</span> <span class="token string">'full'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> LoginComponent <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'register'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> RegisterComponent <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'forgot-password'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> ForgotPasswordComponent <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> MainLayoutComponent<span class="token punctuation">,</span>
    canActivate<span class="token operator">:</span><span class="token punctuation">[</span>authGuard<span class="token punctuation">]</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'dashboard'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> DashboardComponent <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'alerts'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> AlertsComponent <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'buttons'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> ButtonsComponent <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'logout'</span><span class="token punctuation">,</span>
    canActivate<span class="token operator">:</span><span class="token punctuation">[</span>logoutGuard<span class="token punctuation">]</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span>LoginComponent
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'**'</span><span class="token punctuation">,</span> redirectTo<span class="token operator">:</span> <span class="token string">'login'</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code>`),s(g),h(u,o)}const is=Object.freeze(Object.defineProperty({__proto__:null,default:rs,metadata:en},Symbol.toStringTag,{value:"Module"})),cn={title:"Value Control",date:"2025-06-22",category:"software",subCategory:"Angular18",tags:["fronted","angular","value"],slug:"angular_value"},{title:Za,date:nt,category:st,subCategory:at,tags:tt,slug:pt}=cn;var ds=w(`<h6>應用中傳遞值的方法</h6> <hr/> <p><a href="https://angular.dev/guide/components/inputs#declaring-inputs-with-the-input-decorator" rel="nofollow">官方文件</a></p> <h3>Input</h3> <p>舊版寫法 <code>@Input()</code></p> <p>有提供一些屬性操作，可參考文件</p> <pre class="language-ts"><!></pre> <p>新版寫法 <code>import &#123; input &#125; from '@angular/core'</code></p> <pre class="language-ts"><!></pre> <pre class="language-html"><!></pre> <h3>Output</h3> <p>都須維護兩個值</p> <br/> <p>舊版寫法 <code>@Output()</code></p> <pre class="language-js"><!></pre> <p>新版寫法<code>import &#123; input, output &#125; from '@angular/core'</code></p> <pre class="language-js"><!></pre> <pre class="language-html"><!></pre> <h3>ViewChild & ViewChildren</h3> <p>ViewChild(抓第一個) & ViewChildren(抓符合條件) 是 Angular 中的一種在元件 class 中存取 template 上某個/種類元素或元件實例的方法。</p> <p>舊版 @ViewChild()</p> <pre class="language-js"><!></pre> <pre class="language-html"><!></pre> <p>新版 viewChild()</p> <pre class="language-js"><!></pre> <p>可以這樣用</p> <pre class="language-js"><!></pre> <h3>Dependency Injection</h3> <pre class="language-ts"><!></pre> <pre class="language-ts"><!></pre> <h3>Signals</h3> <pre class="language-js"><!></pre> <pre class="language-ts"><!></pre> <p>常見用法</p> <pre class="language-ts"><!></pre> <h3>untracked()</h3> <p>讀取 signal 值，但不想讓它變成 reactive 依賴時，就用 untracked()</p> <p>原本</p> <pre class="language-js"><!></pre> <p>有時只需初始化時取值就好，所以不須自動追蹤。有需要再寫一個 function 取值</p> <pre class="language-js"><!></pre> <p>條件符合再反應一次</p> <pre class="language-js"><!></pre>`,1);function gs(u){var o=ds(),p=t(v(o),12),r=n(p);a(r,()=>`<code class="language-ts"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomSlider</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// = 0 為初始值, 若有傳遞進來就取代</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> defineValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(p);var e=t(p,4),i=n(e);a(i,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> input <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomSlider</span> <span class="token punctuation">&#123;</span>
  defineValue <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 這就是 signal 版本的 Input</span>
<span class="token punctuation">&#125;</span></code>`),s(e);var c=t(e,2),d=n(c);a(d,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-slider</span> <span class="token attr-name">[defineValue]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>`),s(c);var l=t(c,10),y=n(l);a(y,()=>`<code class="language-js">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomSlider</span> <span class="token punctuation">&#123;</span>
  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> defineValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> defineValueChange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">onValueChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newValue</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defineValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defineValueChange<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(l);var k=t(l,4),m=n(k);a(m,()=>`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> input<span class="token punctuation">,</span> output <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomSlider</span> <span class="token punctuation">&#123;</span>
  defineValue <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  defineValueChange <span class="token operator">=</span> output<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">onValueChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newValue</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defineValue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defineValueChange<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(k);var g=t(k,2),b=n(g);a(b,()=>`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-slider</span>
  <span class="token attr-name">[defineValue]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sliderValue<span class="token punctuation">"</span></span>
  <span class="token attr-name">(defineValueChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sliderValue = $event<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-slider</span> <span class="token attr-name">[(defineValue)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>`),s(g);var f=t(g,8),S=n(f);a(S,()=>`<code class="language-js">@<span class="token function">ViewChild</span><span class="token punctuation">(</span><span class="token string">'myDiv'</span><span class="token punctuation">)</span> divElement<span class="token operator">!</span><span class="token operator">:</span> ElementRef<span class="token punctuation">;</span>

<span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>divElement<span class="token punctuation">.</span>nativeElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(f);var _=t(f,2),R=n(_);a(R,()=>'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">#myDiv</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'),s(_);var C=t(_,4),E=n(C);a(E,()=>`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> viewChild<span class="token punctuation">,</span> ElementRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">'app-my-component'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">standalone</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;div #myDiv>Hello&lt;/div></span><span class="token template-punctuation string">&#96;</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">&#123;</span>
  div <span class="token operator">=</span> <span class="token function">viewChild</span><span class="token punctuation">(</span><span class="token string">'myDiv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>nativeElement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// signal.value 可改寫為函式形式</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(C);var I=t(C,4),T=n(I);a(T,()=>`<code class="language-js"><span class="token comment">// div = viewChild.required('myDiv', &#123; read: ElementRef &#125;);</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nativeElement<span class="token punctuation">;</span>
  el<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'2px solid red'</span><span class="token punctuation">;</span> <span class="token comment">// 用邏輯操作 CSS</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &lt;app-player #playerRef /></span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">playerRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 操作&lt;DOM>方法</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`),s(I);var D=t(I,4),A=n(D);a(A,()=>`<code class="language-ts"><span class="token comment">// hero.service.ts</span>
<span class="token comment">// @Injectabl語法會編譯期自動註冊進global</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  providedIn<span class="token operator">:</span> <span class="token string">'root'</span> <span class="token comment">// angular rule => hardcode </span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> heroes<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'IronMan'</span><span class="token punctuation">,</span> <span class="token string">'Thor'</span><span class="token punctuation">,</span> <span class="token string">'Hulk'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">addHero</span><span class="token punctuation">(</span>hero<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">removeHero</span><span class="token punctuation">(</span>hero<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>heroes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>h <span class="token operator">=></span> h <span class="token operator">!==</span> hero<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(D);var O=t(D,2),L=n(O);a(L,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HeroService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../services/hero.service'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-hero'</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;div *ngFor="let h of heroes">&#123;&#123; h &#125;&#125;&lt;/div></span><span class="token template-punctuation string">&#96;</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroComponent</span> <span class="token punctuation">&#123;</span>
  heroes<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> heroService<span class="token operator">:</span> HeroService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>heroes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroService<span class="token punctuation">.</span><span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>heroService<span class="token punctuation">.</span><span class="token function">addHero</span><span class="token punctuation">(</span><span class="token string">'Captain Marvel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>heroes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroService<span class="token punctuation">.</span><span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(O);var N=t(O,4),un=n(N);a(un,()=>`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> signal <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">'Morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 讀值（注意！不是 firstName.value，而是呼叫它）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 'Morgan'</span>

<span class="token comment">// 設定新值</span>
firstName<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Jaime'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基於舊值更新</span>
firstName<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=></span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(N);var F=t(N,2),kn=n(F);a(kn,()=>`<code class="language-ts"><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">'Morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> firstNameCapitalized <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 唯獨變數，類似 Vue 自動追蹤</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">firstNameCapitalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'MORGAN'</span>

firstName<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Jaime'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">firstNameCapitalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'JAIME'（自動反應）</span></code>`),s(F);var M=t(F,4),rn=n(M);a(rn,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> signal<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
    &lt;p>Hello, &#123;&#123; name() &#125;&#125;!&lt;/p>
    &lt;button (click)="setName('Morgan')">Change&lt;/button>
    &lt;p>Upper: &#123;&#123; nameUpper() &#125;&#125;&lt;/p>
  </span><span class="token template-punctuation string">&#96;</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HelloComponent</span> <span class="token punctuation">&#123;</span>
  name <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">'Jaime'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  nameUpper <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setName</span><span class="token punctuation">(</span>newName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(M);var $=t(M,8),dn=n($);a(dn,()=>`<code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Computing message...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s($);var j=t($,4),gn=n(j);a(gn,()=>`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> signal<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> untracked <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 建立 signal 狀態</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 初始化時 log，一次就好</span>
<span class="token keyword">const</span> logCountEffect <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> initialValue <span class="token operator">=</span> <span class="token function">untracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">[Init] count = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>initialValue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 提供一個隨時手動讀取但不追蹤的方法</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">readCountWithoutTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">untracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 4. 例：更新 count 值（可在任意地方呼叫）</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  count<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(j);var q=t(j,4),mn=n(q);a(mn,()=>`<code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 錯誤：這樣 b() 會被加入依賴</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 即使沒執行，也可能被追蹤</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 正確：不讓 b() 成為依賴</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">untracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),s(q),h(u,o)}const ms=Object.freeze(Object.defineProperty({__proto__:null,default:gs,metadata:cn},Symbol.toStringTag,{value:"Module"})),ln={title:"CSS Render 範本",date:"2025-06-22",category:null,subCategory:null,tags:["svelte","blog","markdown"],slug:"example"},{title:ot,date:et,category:ct,subCategory:lt,tags:ut,slug:kt}=ln;var ys=w('<p>這是第一篇文章，用來展示部落格如何從 markdown 載入內容。</p> <hr/> <h1>這是 H1 標題</h1> <h2>這是 H2 標題</h2> <h3>這是 H3 標題</h3> <hr/> <p>段落文字：這是一段普通的段落內容，展示預設的段落文字樣式。</p> <p>強調文字：<strong>粗體</strong>、<em>斜體</em>、<del>刪除線</del>。</p> <hr/> <h3>清單測試</h3> <ul><li>無序清單項目 1</li> <li>無序清單項目 2 <ul><li>子項目 a</li> <li>子項目 b</li></ul></li></ul> <ol><li>有序清單項目 1</li> <li>有序清單項目 2 <ol><li>子項目 i</li> <li>子項目 ii</li></ol></li></ol> <hr/> <h3>程式碼區塊</h3> <h4>行內程式碼</h4> <p>例如你可以這樣寫：<code>console.log("Hello Svelte!")</code></p> <h4>區塊程式碼</h4> <pre class="language-js"><!></pre>',1);function fs(u){var o=ys(),p=t(v(o),34),r=n(p);a(r,()=>`<code class="language-js"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),s(p),h(u,o)}const ws=Object.freeze(Object.defineProperty({__proto__:null,default:fs,metadata:ln},Symbol.toStringTag,{value:"Module"})),U=[],G=Object.assign({"/src/content/Backend/FSM.md":Rn,"/src/content/Database/db_leetcode50.md":Tn,"/src/content/Database/db_normalization.md":xn,"/src/content/Database/db_relational.md":Fn,"/src/content/Database/db_sql.md":jn,"/src/content/Devlop-Note/cashflow.md":Hn,"/src/content/Devlop-Note/jsPDF.md":Xn,"/src/content/Devlop-Note/xlsx_excel.md":zn,"/src/content/Domain-Driven/DDD_layer.md":Qn,"/src/content/Domain-Driven/DDD_mediator.md":ns,"/src/content/Domain-Driven/DDD_outbox.md":ts,"/src/content/Fronted/angular_basic.md":es,"/src/content/Fronted/angular_http.md":us,"/src/content/Fronted/angular_router.md":is,"/src/content/Fronted/angular_value.md":ms,"/src/content/emptyArticle.md":ws});for(const u in G){const o=G[u];U.push({category:o.metadata.category,subCategory:o.metadata.subCategory,title:o.metadata.title,slug:o.metadata.slug,date:o.metadata.date,tags:o.metadata.tags,excerpt:o.metadata.excerpt??"",component:o.default})}U.sort((u,o)=>o.date.localeCompare(u.date));const rt=Sn(U);export{ws as _,ms as a,is as b,us as c,es as d,ts as e,ns as f,Qn as g,zn as h,Xn as i,Hn as j,jn as k,Fn as l,xn as m,Tn as n,Rn as o,rt as p};
